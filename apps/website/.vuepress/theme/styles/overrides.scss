.main-container {
  min-height: 100vh;
  height: auto;
}

.clr-vertical-nav {
  padding-top: 0;

  & > .nav-link:first-child {
    margin-top: 1rem;
  }
}

// Code Snippets
:not(pre) > code[class*='language-'],
pre[class*='language-'] {
  background-color: #ffffff;
}

// HEADERS
#header-types,
#color-types {
  header {
    margin-bottom: 12px; // This spaces out some of the headers that are stacked in the demos
  }
}
#subnav-types {
  .main-container {
    height: auto; // Allows a demo of the subnav not to be 100% height of page
  }
}

// Fix APIs

.main-container > .content-container {
  min-height: fit-content;
}

/*
  On the first draft of timeline overview there was example of the waiting step
  It used to use the clr-spinner component, this is a modification of the `.spinner` css only element.
 */
.demo-spinner {
  height: 1.8rem;
  width: 1.8rem;
  min-height: 1.8rem;
  min-width: 1.8rem;
}

// Prism code snippet margin
div[class^='language-'] pre {
  margin: 1rem 0;
}

// Override icons in header
.header-1 clr-icon,
.header-2 clr-icon,
.header-3 clr-icon,
.header-4 clr-icon,
.header-5 clr-icon,
.header-6 clr-icon {
  --color: var(--clr-header-title-color);
  opacity: 1;
}

// Override icons in buttons
.btn-primary.btn-icon clr-icon {
  --color: var(--clr-btn-primary-color, #fff);
}
.btn-icon clr-icon {
  --color: var(--clr-btn-default-color, #0072a3);
}
.btn-danger.btn-icon clr-icon,
.btn-warning.btn-icon clr-icon {
  --color: var(--clr-btn-default-color, #0072a3);
}
.btn-success.btn-icon clr-icon {
  --color: var(--clr-btn-success-color, #fff);
}
.btn-icon[disabled] clr-icon {
  --color: var(--clr-btn-icon-disabled-color, #666);
}

// Override icons in alerts
.alert-danger .alert-icon {
  --color: var(--clr-alert-danger-icon-color, #991700);
}
.alert-warning .alert-icon {
  --color: var(--clr-alert-warning-icon-color, #454545);
}
.alert-info .alert-icon {
  --color: var(--clr-alert-info-icon-color, #00567a);
}
.alert-success .alert-icon {
  --color: var(--clr-alert-success-icon-color, #306b00);
}
.alert-app-level.alert-info .alert-icon,
.alert-app-level.alert-danger .alert-icon,
.alert-app-level.alert-warning .alert-icon {
  --color: var(--clr-app-alert-info-icon-color);
}

// Override for Clarity Core icon colors
.clr-validate-icon {
  --color: var(--cds-global-color-red-800);
}

// Center the tooltip demos
.demo-wrapper .tooptip {
}

p code {
  color: var(--clr-global-color-red-800, #c21d00);
}

// From porting grid demos
.clr-example .clr-example-col-value {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 1.8rem;
  border-radius: 0.15rem;
  background: #d8e3e9;
  margin: 0.3rem 0;
}

.clr-example .clr-example-nesting-row,
.clr-example .clr-example-row {
  background: #304250;
  margin: 0.3rem 0;
}

.clr-example .clr-example-row {
  height: 5.4rem;
}

.clr-example .clr-example-nesting-row .clr-example-nesting-row {
  background: #62727f;
}

// Workaround for cds-alert-actions issue
cds-alert-actions {
  display: block;
}

// This is added to be able to use core layout tokens
//style="height: 100vh; max-height: 100vh;
.main-container {
  height: 100vh;
  max-height: 100vh;
}

// core has a token to turn off wrapping but it doesn't seem to work.
// This is the override / workaround for now.
// TODO: figure out if there is an issue with how I've tried to use the core nowrap property.
.content-container {
  flex-wrap: nowrap;
}

// Side efects from combining @cds/core layout tokens and legacy @clr/ui
.content-area {
  height: calc(100vh - 3rem); // Grow from the bottom of the header to the bottom of the viewport.
}

// No padding on the home page b/c of hero component
.content-area.home-page {
  padding: 0 !important;
}

// This override is needed b/c I want the legacy @clr/ui contaier to also fill the space from the header to bottom of
// the viewport.
.clr-vertical-nav {
  height: calc(100vh - 3rem);
}

.nav-content {
  width: 100%; // this container in @clr/ui is not fully expanding with the @cds/core layout
}

.min-height-demo {
  min-height: 400px;
  height: 400px;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  .header-anchor {
    opacity: 0;
    cursor: pointer;
    display: inline-block;
    cds-icon {
      margin-top: calc(-1 * var(--cds-global-space-3));
      cursor: pointer;
    }
    &:focus {
      opacity: 1;
    }
  }

  &:hover .header-anchor {
    opacity: 1;
    text-decoration: none;
  }
}

h1 .header-anchor cds-icon {
  width: var(--cds-global-space-10);
  height: var(--cds-global-space-10);
}

h2 .header-anchor cds-icon {
  width: var(--cds-global-space-10);
  height: var(--cds-global-space-10);
}

h3 .header-anchor cds-icon {
  width: var(--cds-global-space-9);
  height: var(--cds-global-space-9);
}

h4 .header-anchor cds-icon {
  width: var(--cds-space-space-9);
  height: var(--cds-space-space-9);
}

.demo-inverse {
  background-color: #2c2c2c;
  padding-left: 1rem;
}

.asset-download-btn cds-icon {
  vertical-align: text-top;
}

// Target viewports that are scaled (mobile) or zoomed in past 125%
@media only screen and (max-width: 1433px) {
  // This should apply to any @clr/ui tables - APIs and releases
  .table {
    table-layout: fixed;
    width: 100%;

    td {
      word-wrap: break-word;
    }
  }
}

/*
 * This section is an override for something that doesn't exist in Core yet.
 * When the expanded is added to core we need to remove this css.
 * (but leave the html implementing it)
 *
 */

[cds-text*='expanded'][cds-text*='title'] {
  --cds-global-typography-title-line-height: 1.6rem;
}

[cds-text*='expanded'][cds-text*='section'] {
  --cds-global-typography-section-line-height: 1.4rem;
}

[cds-text*='expanded'][cds-text*='subection'] {
  --cds-global-typography-subsection-line-height: 1.2rem;
}

[cds-text*='expanded'][cds-text*='body'] {
  --cds-global-typography-body-line-height: 1.2rem;
}

body .no-clr-ui h1,
body .no-clr-ui h2,
body .no-clr-ui h3,
body .no-clr-ui h4,
body .no-clr-ui h5,
body .no-clr-ui h6,
body .no-clr-ui p {
  color: inherit;
  font-family: inherit;
  font-weight: inherit;
  font-size: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  margin-top: 0;
  margin-bottom: 0;
}

.component-subsection p + p {
  margin-top: var(--cds-token-space-size-7, 0.8rem);
}

.indent-section + .component-section-title,
.component-section p + p {
  margin-top: var(--cds-token-layout-space-lg, 1.2rem);
}

.clr-row + .component-section-title,
.indent-section + .component-section-title.level-one,
.component-subsection + .component-section-title,
.component-section + .component-section-title {
  margin-top: var(--cds-token-layout-space-xl, 2.4rem);
}

.clr-row + .component-section-title.level-one,
.component-subsection + .component-section-title.level-one,
.component-section + .component-section-title.level-one {
  margin-top: var(--cds-token-layout-space-xxl, 4.8rem);
}

.component-subsection + .inset,
.component-section + .inset,
.component-subsection + .inline-code,
.component-section + .inline-code,
.component-section + .component-subsection-title,
.component-subsection + .component-subsection-title,
.component-section + .component-subsection-title .clr-row + .component-subsection-title {
  margin-top: var(--cds-token-layout-space-lg, 1.2rem);
}

.theme-default-content .component-subsection:last-child(),
.theme-default-content .component-section:last-child() {
  margin-bottom: var(--cds-token-layout-space-xl, 2.4rem);
}

.card-like {
  border-radius: var(--cds-token-global-border-radius, 0.15rem);
  border-style: solid;
  border-width: var(--cds-token-global-border-width, 0.05rem);
  border-color: var(--cds-token-color-neutral-500, #b3b3b3);
  background: var(--cds-token-color-neutral-0);
}

// Fix footnotes styling
.footnotes .footnote-item p {
  display: contents;
}
.footnotes-sep {
  margin: var(--cds-global-space-6) 0;
  border: 0;
  border-top: var(--cds-token-space-size-1) solid var(--cds-token-color-neutral-900);
}
