"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
/**
 * Private counter to generate unique IDs for the checkboxes, to bind the labels to them.
 */
var latestId = 0;
var Checkbox = (function () {
    function Checkbox() {
        // If our host has an ID attribute, we use this instead of our index.
        this._id = (latestId++).toString();
        // If our host has a name attribute, we apply it to the checkbox.
        this.name = null;
        // Support for inline checkboxes, adds the necessary class to the host
        this.inline = false;
        this._checked = false;
        this._indeterminate = false;
        this.indeterminateChange = new core_1.EventEmitter(false);
        this.change = new core_1.EventEmitter(false);
        /*
         * These callbacks will be given to us through the ControlValueAccessor interface,
         * and we need to call them when the user interacts with the checkbox.
         */
        this.onChangeCallback = function (_) { };
        this.onTouchedCallback = function () { };
    }
    Object.defineProperty(Checkbox.prototype, "id", {
        get: function () {
            return "clr-checkbox-" + this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "checked", {
        get: function () {
            return this._checked;
        },
        set: function (value) {
            if (value !== this._checked) {
                this._checked = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "indeterminate", {
        get: function () {
            return this._indeterminate;
        },
        set: function (value) {
            this.checked = false;
            this._indeterminate = value;
            this.indeterminateChange.emit(this._indeterminate);
        },
        enumerable: true,
        configurable: true
    });
    Checkbox.prototype.toggle = function () {
        this._indeterminate = false;
        this.checked = !this.checked;
        this.onChangeCallback(this.checked);
        this.change.emit(this.checked);
    };
    Checkbox.prototype.writeValue = function (value) {
        this.checked = !!value;
    };
    Checkbox.prototype.registerOnChange = function (onChange) {
        this.onChangeCallback = onChange;
    };
    Checkbox.prototype.registerOnTouched = function (onTouched) {
        this.onTouchedCallback = onTouched;
    };
    Checkbox.prototype.touch = function () {
        this.onTouchedCallback();
    };
    __decorate([
        core_1.Input("id"), 
        __metadata('design:type', String)
    ], Checkbox.prototype, "_id", void 0);
    __decorate([
        core_1.Input("name"), 
        __metadata('design:type', String)
    ], Checkbox.prototype, "name", void 0);
    __decorate([
        core_1.Input("clrInline"), 
        __metadata('design:type', Object)
    ], Checkbox.prototype, "inline", void 0);
    __decorate([
        core_1.Input("clrChecked"), 
        __metadata('design:type', Object)
    ], Checkbox.prototype, "_checked", void 0);
    __decorate([
        core_1.Input("clrIndeterminate"), 
        __metadata('design:type', Object)
    ], Checkbox.prototype, "indeterminate", null);
    __decorate([
        core_1.Output("clrIndeterminateChange"), 
        __metadata('design:type', core_1.EventEmitter)
    ], Checkbox.prototype, "indeterminateChange", void 0);
    __decorate([
        core_1.Output("clrCheckedChange"), 
        __metadata('design:type', Object)
    ], Checkbox.prototype, "change", void 0);
    Checkbox = __decorate([
        core_1.Component({
            selector: "clr-checkbox",
            template: "\n        <input type=\"checkbox\" [id]=\"id\" [name]=\"name\" [checked]=\"checked\" [indeterminate]=\"indeterminate\" \n               (change)=\"toggle()\" (blur)=\"touch()\">\n        <label [attr.for]=\"id\"><ng-content></ng-content></label>\n    ",
            host: {
                "[class.checkbox]": "!inline",
                "[class.checkbox-inline]": "inline"
            },
            /*
             * This provider lets us declare our checkbox as a ControlValueAccessor,
             * which allows us to use [(ngModel)] directly on our component,
             * with all the automatic features wiring that come with it.
             */
            providers: [{
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: core_1.forwardRef(function () { return Checkbox; }),
                    multi: true
                }]
        }), 
        __metadata('design:paramtypes', [])
    ], Checkbox);
    return Checkbox;
}());
exports.Checkbox = Checkbox;
