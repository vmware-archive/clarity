"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var CodeHighlight = (function () {
    //Had to use renderer because I wanted to add to existing classes on the code block
    //Didn't want to override them completely
    function CodeHighlight(_el, renderer) {
        this._el = _el;
        this.renderer = renderer;
        this._highlight = "";
    }
    CodeHighlight.prototype.ngAfterContentInit = function () {
        this.redraw();
    };
    CodeHighlight.prototype.redraw = function () {
        if (this._el && this._el.nativeElement) {
            Prism.highlightElement(this._el.nativeElement);
        }
    };
    Object.defineProperty(CodeHighlight.prototype, "highlight", {
        get: function () {
            return this._highlight;
        },
        set: function (val) {
            if (val && val.trim() !== "") {
                this._highlight = val;
                this.renderer.setElementClass(this._el.nativeElement, this._highlight, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input("clr-code-highlight"), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], CodeHighlight.prototype, "highlight", null);
    CodeHighlight = __decorate([
        core_1.Directive({
            selector: "code[clr-code-highlight]"
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
    ], CodeHighlight);
    return CodeHighlight;
}());
exports.CodeHighlight = CodeHighlight;
