"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var core_1 = require("@angular/core");
var datagrid_property_comparator_1 = require("./built-in/comparators/datagrid-property-comparator");
var datagrid_property_string_filter_1 = require("./built-in/filters/datagrid-property-string-filter");
var custom_filter_1 = require("./providers/custom-filter");
var sort_1 = require("./providers/sort");
var DatagridColumn = (function () {
    function DatagridColumn(_sort, _cdr) {
        this._sort = _sort;
        this._cdr = _cdr;
        /**
         * A custom filter for this column that can be provided in the projected content
         */
        this.customFilter = false;
    }
    DatagridColumn.prototype.ngAfterViewInit = function () {
        /*
         * Several bindings in our template and on the host depend on ContentChildren and
         * ViewChildren, so we need to re-trigger change detection once everything is ready.
         */
        this._cdr.detectChanges();
    };
    Object.defineProperty(DatagridColumn.prototype, "sortable", {
        /**
         * Indicates if the column is sortable
         */
        get: function () {
            return !!this.sortBy;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sorts the datagrid based on this column
     */
    DatagridColumn.prototype.sort = function () {
        if (!this.sortable) {
            return;
        }
        this._sort.toggle(this.sortBy);
    };
    Object.defineProperty(DatagridColumn.prototype, "sorted", {
        /**
         * Indicates if the column is currently sorted
         */
        get: function () {
            return this.sortable && this.sortBy && this._sort.comparator === this.sortBy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridColumn.prototype, "asc", {
        /**
         * Indicates if the column is currently sorted in ascending order
         */
        get: function () {
            return this.sorted && !this._sort.reverse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridColumn.prototype, "desc", {
        /**
         * Indicates if the column is currently sorted in descending order
         */
        get: function () {
            return this.sorted && this._sort.reverse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridColumn.prototype, "projectedFilter", {
        set: function (custom) {
            if (custom) {
                this.customFilter = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridColumn.prototype, "field", {
        get: function () {
            return this._field;
        },
        set: function (field) {
            if (typeof field === "string") {
                this._field = field;
                this.defaultFieldFilter = new datagrid_property_string_filter_1.DatagridPropertyStringFilter(field);
                if (!this.sortBy) {
                    this.sortBy = new datagrid_property_comparator_1.DatagridPropertyComparator(field);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input("clrDgSortBy"), 
        __metadata('design:type', Object)
    ], DatagridColumn.prototype, "sortBy", void 0);
    __decorate([
        core_1.HostBinding("class.asc"), 
        __metadata('design:type', Object)
    ], DatagridColumn.prototype, "asc", null);
    __decorate([
        core_1.HostBinding("class.desc"), 
        __metadata('design:type', Object)
    ], DatagridColumn.prototype, "desc", null);
    __decorate([
        core_1.ContentChild(custom_filter_1.CustomFilter), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], DatagridColumn.prototype, "projectedFilter", null);
    __decorate([
        core_1.Input("clrDgField"), 
        __metadata('design:type', Object)
    ], DatagridColumn.prototype, "field", null);
    DatagridColumn = __decorate([
        core_1.Component({
            selector: "clr-dg-column",
            template: "\n        <!-- I'm really not happy with that select since it's not very scalable -->\n        <div class=\"datagrid-column-flex\">\n            <ng-content select=\"clr-dg-filter, clr-dg-string-filter\"></ng-content>\n\n            <clr-dg-string-filter\n                *ngIf=\"field && !customFilter\"\n                [clrDgStringFilter]=\"defaultFieldFilter\"\n            ></clr-dg-string-filter>\n\n            <button class=\"datagrid-column-title\" [disabled]=\"!sortable\" (click)=\"sort()\">\n                <ng-content></ng-content>\n            </button>\n        </div>\n    ",
            host: {
                "[class.datagrid-column]": "true"
            }
        }), 
        __metadata('design:paramtypes', [sort_1.Sort, core_1.ChangeDetectorRef])
    ], DatagridColumn);
    return DatagridColumn;
}());
exports.DatagridColumn = DatagridColumn;
