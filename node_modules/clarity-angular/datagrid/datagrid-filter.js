"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var core_1 = require("@angular/core");
var custom_filter_1 = require("./providers/custom-filter");
var filters_1 = require("./providers/filters");
/**
 * Custom filter that can be added in any column to override the default object property string filter.
 * The reason this is not just an input on DatagridColumn is because we need the filter's template to be projected,
 * since it can be anything (not just a text input).
 */
var DatagridFilter = (function () {
    function DatagridFilter(_filters) {
        this._filters = _filters;
        /**
         * Tracks whether the filter dropdown is open or not
         */
        this._open = false;
        this.openChanged = new core_1.EventEmitter(false);
    }
    Object.defineProperty(DatagridFilter.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (open) {
            var boolOpen = !!open;
            if (boolOpen !== this._open) {
                this._open = boolOpen;
                this.openChanged.emit(boolOpen);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridFilter.prototype, "filter", {
        get: function () {
            return this._filter;
        },
        set: function (filter) {
            // If we previously had another filter, we unregister it
            if (this._unregister) {
                this._unregister();
                delete this._unregister;
            }
            this._filter = filter;
            if (typeof filter !== "undefined") {
                this._unregister = this._filters.add(filter);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    DatagridFilter.prototype.ngOnDestroy = function () {
        if (this._unregister) {
            this._unregister();
        }
    };
    Object.defineProperty(DatagridFilter.prototype, "active", {
        /**
         * Indicates if the filter is currently active
         */
        get: function () {
            return !!this.filter && this.filter.isActive();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Shows/hides the filter dropdown
     */
    DatagridFilter.prototype.toggle = function () {
        this.open = !this.open;
    };
    __decorate([
        core_1.Input("clrDgFilterOpen"), 
        __metadata('design:type', Object)
    ], DatagridFilter.prototype, "open", null);
    __decorate([
        core_1.Output("clrDgFilterOpenChange"), 
        __metadata('design:type', Object)
    ], DatagridFilter.prototype, "openChanged", void 0);
    __decorate([
        core_1.Input("clrDgFilter"), 
        __metadata('design:type', Object)
    ], DatagridFilter.prototype, "filter", null);
    DatagridFilter = __decorate([
        core_1.Component({
            selector: "clr-dg-filter",
            // We register this component as a CustomFilter, for the parent column to detect it.
            providers: [{ provide: custom_filter_1.CustomFilter, useExisting: DatagridFilter }],
            template: "\n        <button class=\"datagrid-filter-toggle\" (click)=\"toggle()\"\n           [class.datagrid-filter-open]=\"open\" [class.datagrid-filtered]=\"active\"></button>\n\n        <div class=\"datagrid-filter\" *ngIf=\"open\">\n            <!-- FIXME: this whole filter part needs a final design before we can try to have a cleaner DOM -->\n            <div class=\"datagrid-filter-close-wrapper\">\n                <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"open = false\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n\n            <ng-content></ng-content>\n        </div>\n    "
        }), 
        __metadata('design:paramtypes', [filters_1.Filters])
    ], DatagridFilter);
    return DatagridFilter;
}());
exports.DatagridFilter = DatagridFilter;
