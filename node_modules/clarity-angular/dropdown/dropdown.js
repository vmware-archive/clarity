"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var menuPositions = [
    "bottom-left",
    "bottom-right",
    "top-left",
    "top-right",
    "left-bottom",
    "left-top",
    "right-bottom",
    "right-top"
];
var Dropdown = (function () {
    function Dropdown(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this._open = false;
        this._openChanged = new core_1.EventEmitter(false);
        this.isMenuClosable = true;
    }
    Object.defineProperty(Dropdown.prototype, "menuPosition", {
        set: function (pos) {
            if (pos && (menuPositions.indexOf(pos) > -1)) {
                this._menuPosition = pos;
            }
            else {
                this._menuPosition = "bottom-left";
            }
            this.removeExistingDirectionClass();
            this.renderer.setElementClass(this.elementRef.nativeElement, this._menuPosition, true);
        },
        enumerable: true,
        configurable: true
    });
    Dropdown.prototype.removeExistingDirectionClass = function () {
        var currentClassList = this.elementRef.nativeElement.classList;
        menuPositions.forEach(function (direction) {
            if (currentClassList.contains(direction)) {
                currentClassList.toggle(direction);
            }
        });
    };
    Dropdown.prototype.toggleDropdown = function () {
        this.open = !this.open;
    };
    Object.defineProperty(Dropdown.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (val) {
            this._open = val;
            this._openChanged.emit(val);
        },
        enumerable: true,
        configurable: true
    });
    //called on mouse clicks anywhere in the DOM.
    //Checks to see if the mouseclick happened on the host or outside
    Dropdown.prototype.onMouseClick = function (target) {
        if (this._open) {
            var current = target; //Get the element in the DOM on which the mouse was clicked
            var dropdownHost = this.elementRef.nativeElement; //Get the current dropdown native HTML element
            //Start checking if current and dropdownHost are equal. If not traverse to the parentNode and check again.
            while (current) {
                if (current === dropdownHost) {
                    return;
                }
                current = current.parentNode;
            }
            this._open = false; //Remove .open from the dropdown
        }
    };
    __decorate([
        core_1.HostBinding("class.open"),
        core_1.Input("clrDropdownMenuOpen"), 
        __metadata('design:type', Boolean)
    ], Dropdown.prototype, "_open", void 0);
    __decorate([
        core_1.Output("clrDropdownMenuOpenChange"), 
        __metadata('design:type', core_1.EventEmitter)
    ], Dropdown.prototype, "_openChanged", void 0);
    __decorate([
        core_1.Input("clrCloseMenuOnItemClick"), 
        __metadata('design:type', Boolean)
    ], Dropdown.prototype, "isMenuClosable", void 0);
    __decorate([
        core_1.Input("clrMenuPosition"), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], Dropdown.prototype, "menuPosition", null);
    __decorate([
        core_1.HostListener("document:click", ["$event.target"]), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Object]), 
        __metadata('design:returntype', void 0)
    ], Dropdown.prototype, "onMouseClick", null);
    Dropdown = __decorate([
        core_1.Component({
            selector: "clr-dropdown",
            template: "\n        <ng-content select=\".dropdown-toggle\"></ng-content>\n        <ng-content select=\".dropdown-menu\"></ng-content>\n    ",
            host: {
                "[class.dropdown]": "true"
            }
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
    ], Dropdown);
    return Dropdown;
}());
exports.Dropdown = Dropdown;
var DropdownToggle = (function () {
    function DropdownToggle(_dropdown) {
        this._dropdown = _dropdown;
    }
    DropdownToggle.prototype.onDropdownToggleClick = function () {
        this._dropdown.toggleDropdown();
    };
    __decorate([
        core_1.HostListener("click"), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], DropdownToggle.prototype, "onDropdownToggleClick", null);
    DropdownToggle = __decorate([
        core_1.Directive({
            selector: ".dropdown-toggle"
        }), 
        __metadata('design:paramtypes', [Dropdown])
    ], DropdownToggle);
    return DropdownToggle;
}());
exports.DropdownToggle = DropdownToggle;
var DropdownMenuItem = (function () {
    function DropdownMenuItem(_dropdown, el) {
        this._dropdown = _dropdown;
        this.el = el;
    }
    DropdownMenuItem.prototype.onDropdownItemClick = function () {
        if (this._dropdown.isMenuClosable && !this.el.nativeElement.classList.contains("disabled")) {
            this._dropdown.toggleDropdown();
        }
    };
    __decorate([
        core_1.HostListener("click"), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], DropdownMenuItem.prototype, "onDropdownItemClick", null);
    DropdownMenuItem = __decorate([
        core_1.Directive({
            selector: ".dropdown-item"
        }), 
        __metadata('design:paramtypes', [Dropdown, core_1.ElementRef])
    ], DropdownMenuItem);
    return DropdownMenuItem;
}());
exports.DropdownMenuItem = DropdownMenuItem;
exports.DROPDOWN_DIRECTIVES = [
    Dropdown,
    DropdownToggle,
    DropdownMenuItem
];
