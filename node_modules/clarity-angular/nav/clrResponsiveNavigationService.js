"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var clrResponsiveNavCodes_1 = require("./clrResponsiveNavCodes");
var clrResponsiveNavControlMessage_1 = require("./clrResponsiveNavControlMessage");
var ClrResponsiveNavigationService = (function () {
    function ClrResponsiveNavigationService() {
        this.responsiveNavList = [];
        this.registerNavSubject = new BehaviorSubject_1.BehaviorSubject([]);
        this.controlNavSubject = new BehaviorSubject_1.BehaviorSubject(new clrResponsiveNavControlMessage_1.ClrResponsiveNavControlMessage(clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_CLOSE_ALL, -999));
    }
    ClrResponsiveNavigationService.prototype.registerNav = function (navLevel) {
        if (!navLevel || this.isNavRegistered(navLevel)) {
            return;
        }
        this.responsiveNavList.push(navLevel);
        this.registerNavSubject.next(this.responsiveNavList);
    };
    ClrResponsiveNavigationService.prototype.isNavRegistered = function (navLevel) {
        if (this.responsiveNavList.indexOf(navLevel) > -1) {
            console.error("Multiple clr-nav-level " + navLevel
                + " attributes found. Please make sure that only one exists");
            return true;
        }
        return false;
    };
    ClrResponsiveNavigationService.prototype.unregisterNav = function (navLevel) {
        var index = this.responsiveNavList.indexOf(navLevel);
        if (index > -1) {
            this.responsiveNavList.splice(index, 1);
            this.registerNavSubject.next(this.responsiveNavList);
        }
    };
    ClrResponsiveNavigationService.prototype.sendControlMessage = function (controlCode, navLevel) {
        var message = new clrResponsiveNavControlMessage_1.ClrResponsiveNavControlMessage(controlCode, navLevel);
        this.controlNavSubject.next(message);
    };
    ClrResponsiveNavigationService.prototype.closeAllNavs = function () {
        var message = new clrResponsiveNavControlMessage_1.ClrResponsiveNavControlMessage(clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_CLOSE_ALL, -999);
        this.controlNavSubject.next(message);
    };
    ClrResponsiveNavigationService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], ClrResponsiveNavigationService);
    return ClrResponsiveNavigationService;
}());
exports.ClrResponsiveNavigationService = ClrResponsiveNavigationService;
