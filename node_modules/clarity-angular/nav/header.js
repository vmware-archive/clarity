"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var clrResponsiveNavigationService_1 = require("./clrResponsiveNavigationService");
var clrResponsiveNavCodes_1 = require("./clrResponsiveNavCodes");
var Header = (function () {
    function Header(elRef, responsiveNavService) {
        this.elRef = elRef;
        this.responsiveNavService = responsiveNavService;
        this.isNavLevel1OnPage = false;
        this.isNavLevel2OnPage = false;
    }
    Header.prototype.ngOnInit = function () {
        var _this = this;
        this._subscription = this.responsiveNavService.registerNavSubject.subscribe({
            next: function (navLevelList) {
                _this.initializeNavTriggers(navLevelList);
            }
        });
    };
    Object.defineProperty(Header.prototype, "responsiveNavCodes", {
        //getter to access the responsive navigation codes from the template
        get: function () {
            return clrResponsiveNavCodes_1.ClrResponsiveNavCodes;
        },
        enumerable: true,
        configurable: true
    });
    //reset triggers. handles cases when an application has different nav levels on different pages.
    Header.prototype.resetNavTriggers = function () {
        this.isNavLevel1OnPage = false;
        this.isNavLevel2OnPage = false;
    };
    //decides which triggers to show on the header
    Header.prototype.initializeNavTriggers = function (navList) {
        var _this = this;
        this.resetNavTriggers();
        if (navList.length > 2) {
            console.error("More than 2 Nav Levels detected.");
            return;
        }
        navList.forEach(function (navLevel) {
            if (navLevel === clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_LEVEL_1) {
                _this.isNavLevel1OnPage = true;
            }
            else if (navLevel === clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_LEVEL_2) {
                _this.isNavLevel2OnPage = true;
            }
        });
    };
    //closes the nav that is open
    Header.prototype.closeOpenNav = function () {
        this.responsiveNavService.closeAllNavs();
    };
    //toggles the nav that is open
    Header.prototype.toggleNav = function (navLevel) {
        this.responsiveNavService.sendControlMessage(clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_TOGGLE, navLevel);
    };
    Header.prototype.ngOnDestroy = function () {
        this._subscription.unsubscribe();
    };
    Header = __decorate([
        core_1.Component({
            selector: "clr-header",
            template: "\n        <button\n            *ngIf=\"isNavLevel1OnPage\"\n            class=\"header-hamburger-trigger\"\n            (click)=\"toggleNav(responsiveNavCodes.NAV_LEVEL_1)\">\n            <span></span>\n        </button>\n        <ng-content></ng-content>\n        <button\n            *ngIf=\"isNavLevel2OnPage\"\n            class=\"header-overflow-trigger\"\n            (click)=\"toggleNav(responsiveNavCodes.NAV_LEVEL_2)\">\n            <span></span>\n        </button>\n        <div class=\"header-backdrop\" (click)=\"closeOpenNav()\"></div>\n    ",
            host: { "[class.header]": "true" }
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, clrResponsiveNavigationService_1.ClrResponsiveNavigationService])
    ], Header);
    return Header;
}());
exports.Header = Header;
