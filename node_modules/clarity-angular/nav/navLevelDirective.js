"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var clrResponsiveNavigationService_1 = require("./clrResponsiveNavigationService");
var clrResponsiveNavCodes_1 = require("./clrResponsiveNavCodes");
var NavLevelDirective = (function () {
    function NavLevelDirective(responsiveNavService, elementRef) {
        this.responsiveNavService = responsiveNavService;
        this.elementRef = elementRef;
    }
    NavLevelDirective.prototype.ngAfterContentInit = function () {
        if (this.level !== clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_LEVEL_1 &&
            this.level !== clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_LEVEL_2) {
            console.error("Nav Level can only be 1 or 2");
            return;
        }
        this.responsiveNavService.registerNav(this.level);
        this.addNavClass(this.level);
    };
    NavLevelDirective.prototype.addNavClass = function (level) {
        var navHostClassList = this.elementRef.nativeElement.classList;
        if (level === clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_LEVEL_1) {
            navHostClassList.add(clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_CLASS_LEVEL_1);
        }
        else if (level === clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_LEVEL_2) {
            navHostClassList.add(clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_CLASS_LEVEL_2);
        }
    };
    Object.defineProperty(NavLevelDirective.prototype, "level", {
        get: function () {
            return this._level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavLevelDirective.prototype, "responsiveNavCodes", {
        //getter to access the responsive navigation codes from the template
        get: function () {
            return clrResponsiveNavCodes_1.ClrResponsiveNavCodes;
        },
        enumerable: true,
        configurable: true
    });
    NavLevelDirective.prototype.open = function () {
        this.responsiveNavService.sendControlMessage(clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_OPEN, this.level);
    };
    NavLevelDirective.prototype.close = function () {
        this.responsiveNavService.sendControlMessage(clrResponsiveNavCodes_1.ClrResponsiveNavCodes.NAV_CLOSE, this.level);
    };
    //TODO: Figure out whats the best way to do this. Possible methods
    //1. HostListener (current solution)
    //2. Directives on the .nav-link class. We discussed on moving away from class selectors but I forget the reason why
    NavLevelDirective.prototype.onMouseClick = function (target) {
        var current = target; //Get the element in the DOM on which the mouse was clicked
        var navHost = this.elementRef.nativeElement; //Get the current nav native HTML element
        //Start checking if current and navHost are equal.
        //If not traverse to the parentNode and check again.
        while (current) {
            if (current === navHost) {
                return;
            }
            else if (current.classList.contains("nav-link")) {
                this.close();
                return;
            }
            current = current.parentNode;
        }
    };
    NavLevelDirective.prototype.ngOnDestroy = function () {
        this.responsiveNavService.unregisterNav(this.level);
    };
    __decorate([
        core_1.Input("clr-nav-level"), 
        __metadata('design:type', Number)
    ], NavLevelDirective.prototype, "_level", void 0);
    __decorate([
        core_1.HostListener("click", ["$event.target"]), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Object]), 
        __metadata('design:returntype', void 0)
    ], NavLevelDirective.prototype, "onMouseClick", null);
    NavLevelDirective = __decorate([
        core_1.Directive({
            selector: "[clr-nav-level]"
        }), 
        __metadata('design:paramtypes', [clrResponsiveNavigationService_1.ClrResponsiveNavigationService, core_1.ElementRef])
    ], NavLevelDirective);
    return NavLevelDirective;
}());
exports.NavLevelDirective = NavLevelDirective;
