"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require("@angular/core");
var index_1 = require("../animations/collapse/index");
var StackBlock = (function () {
    /*
     * This would be more efficient with @ContentChildren, with the parent StackBlock
     * querying for children StackBlocks, but this feature is not available when downgrading
     * the component for Angular 1.
     */
    function StackBlock(parent) {
        this.parent = parent;
        this.expanded = false;
        this.expandedChange = new core_1.EventEmitter(false);
        this.expandable = false;
        this._changedChildren = 0;
        this._fullyInitialized = false;
        this._changed = false;
        if (parent) {
            parent.addChild();
        }
    }
    Object.defineProperty(StackBlock.prototype, "getChangedValue", {
        get: function () {
            return this._changed || (this._changedChildren > 0 && !this.expanded);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StackBlock.prototype, "setChangedValue", {
        set: function (value) {
            this._changed = value;
            if (this.parent && this._fullyInitialized) {
                if (value) {
                    this.parent._changedChildren++;
                }
                else {
                    this.parent._changedChildren--;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    StackBlock.prototype.ngOnInit = function () {
        //in order to access the parent StackBlock's properties,
        //the child StackBlock  has to be fully initialized at first.
        this._fullyInitialized = true;
    };
    StackBlock.prototype.addChild = function () {
        this.expandable = true;
    };
    StackBlock.prototype.toggleExpand = function () {
        if (this.expandable) {
            this.expanded = !this.expanded;
            this.expandedChange.emit(this.expanded);
        }
    };
    __decorate([
        core_1.HostBinding("class.stack-block-expanded"),
        core_1.Input("clrSbExpanded"), 
        __metadata('design:type', Boolean)
    ], StackBlock.prototype, "expanded", void 0);
    __decorate([
        core_1.Output("clrSbExpandedChange"), 
        __metadata('design:type', core_1.EventEmitter)
    ], StackBlock.prototype, "expandedChange", void 0);
    __decorate([
        core_1.HostBinding("class.stack-block-expandable"),
        core_1.Input("clrSbExpandable"), 
        __metadata('design:type', Boolean)
    ], StackBlock.prototype, "expandable", void 0);
    __decorate([
        core_1.HostBinding("class.stack-block-changed"), 
        __metadata('design:type', Boolean)
    ], StackBlock.prototype, "getChangedValue", null);
    __decorate([
        core_1.Input("clrSbNotifyChange"), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], StackBlock.prototype, "setChangedValue", null);
    StackBlock = __decorate([
        core_1.Component({
            selector: "clr-stack-block",
            template: "\n        <dt class=\"stack-block-label\" (click)=\"toggleExpand()\">\n            <ng-content select=\"clr-stack-label\"></ng-content>\n        </dt>\n        <dd class=\"stack-block-content\">\n            <ng-content></ng-content>\n        </dd>\n        <!-- FIXME: remove this string concatenation when boolean states are supported -->\n        <div [@collapse]=\"''+!expanded\" class=\"stack-children\">\n            <ng-content select=\"clr-stack-block\"></ng-content>\n        </div>\n    ",
            // Custom elements are inline by default
            styles: ["\n        :host { display: block; }\n    "],
            // Make sure the host has the proper class for styling purposes
            host: {
                "[class.stack-block]": "true"
            },
            animations: [core_1.trigger("collapse", index_1.collapse())]
        }),
        __param(0, core_1.SkipSelf()),
        __param(0, core_1.Optional()), 
        __metadata('design:paramtypes', [StackBlock])
    ], StackBlock);
    return StackBlock;
}());
exports.StackBlock = StackBlock;
