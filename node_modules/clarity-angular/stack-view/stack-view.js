"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var StackView = (function () {
    function StackView() {
        /**
         * Undocumented experimental feature: inline editing.
         */
        this.editable = false;
        this.save = new core_1.EventEmitter(false);
        this._editMode = false;
        this.editingChange = new core_1.EventEmitter(false);
    }
    Object.defineProperty(StackView.prototype, "editing", {
        get: function () {
            return this.editable && this._editMode;
        },
        set: function (value) {
            if (this.editable) {
                this._editMode = value;
                this.editingChange.emit(value);
                if (!value) {
                    this.save.emit(null);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Output("clrStackSave"), 
        __metadata('design:type', core_1.EventEmitter)
    ], StackView.prototype, "save", void 0);
    StackView = __decorate([
        core_1.Component({
            selector: "clr-stack-view",
            template: "\n        <ng-content select=\"clr-stack-header\"></ng-content>\n        <dl class=\"stack-view\"><ng-content></ng-content></dl>\n    ",
            // Custom elements are inline by default.
            styles: ["\n        :host { display: block; }\n    "]
        }), 
        __metadata('design:paramtypes', [])
    ], StackView);
    return StackView;
}());
exports.StackView = StackView;
var StackViewCustomTags = (function () {
    function StackViewCustomTags() {
    }
    StackViewCustomTags = __decorate([
        core_1.Directive({ selector: "clr-stack-label, clr-stack-content" }), 
        __metadata('design:paramtypes', [])
    ], StackViewCustomTags);
    return StackViewCustomTags;
}());
exports.StackViewCustomTags = StackViewCustomTags;
