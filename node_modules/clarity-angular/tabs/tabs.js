"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var tab_link_1 = require("./tab-link");
var tab_content_1 = require("./tab-content");
var nbTabsComponents = 0;
var Tabs = (function () {
    function Tabs() {
        this._currentTabIndex = -1;
        this.currentTabIndexChanged = new core_1.EventEmitter(false);
        this.currentTabLinkChanged = new core_1.EventEmitter(false);
        this.currentTabContentChanged = new core_1.EventEmitter(false);
        this.id = "clr-tabs-" + (nbTabsComponents++);
    }
    Tabs.prototype.setUpLinksAndContents = function () {
        var _this = this;
        // first, iterate over tab links and contents and assign id's if it doesn't exist
        // also set the active tab index; future active tab index will override the earlier one if there are multiple
        this.tabLinks.forEach(function (tabLink, index) {
            if (!tabLink.id) {
                tabLink.id = _this.id + "-tab-" + index;
            }
            if (tabLink.active) {
                _this.currentTabLink = tabLink;
                _this.currentTabIndex = index;
            }
        });
        this.tabContents.forEach(function (tabContent, index) {
            if (!tabContent.id) {
                tabContent.id = _this.id + "-content-" + index;
            }
            if (tabContent.active) {
                _this.currentTabContent = tabContent;
            }
        });
        // second, iterate over tab links and contents to set the aria attributes
        this.tabLinks.forEach(function (tabLink, index) {
            if (index < _this.tabContents.length) {
                tabLink.ariaControls = _this.tabContents[index].id;
            }
        });
        this.tabContents.forEach(function (tabContent, index) {
            if (index < _this.tabLinks.length) {
                tabContent.ariaLabelledBy = _this.tabLinks[index].id;
            }
        });
        // third, set first one as active if there's no active tab link or tab content
        if (!this.currentTabLink && this.tabLinks.length > 0) {
            this.selectTab(this.tabLinks[0]);
        }
    };
    Tabs.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setUpLinksAndContents();
        this.tabLinkChildren.changes.subscribe(function (children) {
            _this.setUpLinksAndContents();
        });
        this.tabContentChildren.changes.subscribe(function (children) {
            _this.setUpLinksAndContents();
        });
    };
    Tabs.prototype.overrideTabContentChildren = function (tabContentChildren) {
        this.tabContentChildren = tabContentChildren;
        this.setUpLinksAndContents();
    };
    Tabs.prototype.overrideTabLinkChildren = function (tabLinks) {
        this.tabLinkChildren = tabLinks;
        this.setUpLinksAndContents();
    };
    Object.defineProperty(Tabs.prototype, "tabLinks", {
        get: function () {
            return this.tabLinkChildren.toArray();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "tabContents", {
        get: function () {
            return this.tabContentChildren.toArray();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "currentTabContent", {
        get: function () {
            return this._currentTabContent;
        },
        set: function (tabContent) {
            this._currentTabContent = tabContent;
            this.currentTabContentChanged.emit(tabContent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "currentTabIndex", {
        get: function () {
            return this._currentTabIndex;
        },
        set: function (index) {
            this._currentTabIndex = index;
            this.currentTabIndexChanged.emit(index);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "currentTabLink", {
        get: function () {
            return this._currentTabLink;
        },
        set: function (tabLink) {
            this._currentTabLink = tabLink;
            this.currentTabLinkChanged.emit(tabLink);
        },
        enumerable: true,
        configurable: true
    });
    Tabs.prototype.selectTab = function (tabLink) {
        // deactivate all tabs and contents
        this.tabLinks.forEach(function (tab) { return tab.active = false; });
        this.tabContents.forEach(function (tabContent) { return tabContent.active = false; });
        // activate the selected Tab
        var index = this.tabLinks.indexOf(tabLink);
        tabLink.active = true;
        this.currentTabLink = tabLink;
        this.currentTabIndex = index;
        // activate the matching content if it exists; if we have a tabLink with no associated content, it'll show blank
        var selectedTabContent = null;
        if (index < this.tabContents.length) {
            selectedTabContent = this.tabContents[index];
            this.currentTabContent = selectedTabContent;
            selectedTabContent.active = true;
        }
    };
    __decorate([
        core_1.ContentChildren(core_1.forwardRef(function () { return tab_link_1.TabLink; })), 
        __metadata('design:type', core_1.QueryList)
    ], Tabs.prototype, "tabLinkChildren", void 0);
    __decorate([
        core_1.ContentChildren(core_1.forwardRef(function () { return tab_content_1.TabContent; })), 
        __metadata('design:type', core_1.QueryList)
    ], Tabs.prototype, "tabContentChildren", void 0);
    __decorate([
        core_1.Input("clrTabsCurrentTabIndex"), 
        __metadata('design:type', Number)
    ], Tabs.prototype, "_currentTabIndex", void 0);
    __decorate([
        core_1.Input("clrTabsCurrentTabLink"), 
        __metadata('design:type', tab_link_1.TabLink)
    ], Tabs.prototype, "_currentTabLink", void 0);
    __decorate([
        core_1.Input("clrTabsCurrentTabContent"), 
        __metadata('design:type', tab_content_1.TabContent)
    ], Tabs.prototype, "_currentTabContent", void 0);
    __decorate([
        core_1.Output("clrTabsCurrentTabIndexChanged"), 
        __metadata('design:type', core_1.EventEmitter)
    ], Tabs.prototype, "currentTabIndexChanged", void 0);
    __decorate([
        core_1.Output("clrTabsCurrentTabLinkChanged"), 
        __metadata('design:type', core_1.EventEmitter)
    ], Tabs.prototype, "currentTabLinkChanged", void 0);
    __decorate([
        core_1.Output("clrTabsCurrentTabContentChanged"), 
        __metadata('design:type', core_1.EventEmitter)
    ], Tabs.prototype, "currentTabContentChanged", void 0);
    Tabs = __decorate([
        core_1.Component({
            selector: "clr-tabs",
            template: "\n      <ul class=\"nav\" role=\"tablist\">\n          <ng-content select=\"clr-tab-link\"></ng-content>\n      </ul>\n      <ng-content select=\"clr-tab-content\"></ng-content>\n    "
        }), 
        __metadata('design:paramtypes', [])
    ], Tabs);
    return Tabs;
}());
exports.Tabs = Tabs;
