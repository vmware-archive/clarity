"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var tabs_1 = require("../tabs/tabs");
var wizard_step_1 = require("./wizard-step");
var wizard_page_1 = require("./wizard-page");
var scrolling_service_1 = require("../main/scrolling-service");
var nbWizardComponents = 0;
var Wizard = (function (_super) {
    __extends(Wizard, _super);
    function Wizard(_scrollingService) {
        _super.call(this);
        this._scrollingService = _scrollingService;
        this.size = "xl"; // xl is the default size
        // Variable that toggles open/close of the wizard component.
        this._open = false;
        // EventEmitter which is emitted on open/close of the wizard.
        this._openChanged = new core_1.EventEmitter(false);
        // Flag to toggle between Next and Finish button
        this.isLast = false;
        // Flag to hide/show back button
        this.isFirst = true;
        // The current page
        this.currentPage = null;
        this.id = "clr-wizard-" + (nbWizardComponents++);
    }
    //Detect when _open is set to true and set no-scrolling to true
    Wizard.prototype.ngOnChanges = function (changes) {
        if (changes && changes.hasOwnProperty("_open")) {
            if (changes["_open"].currentValue) {
                this._scrollingService.stopScrolling();
            }
            else {
                this._scrollingService.resumeScrolling();
            }
        }
    };
    Wizard.prototype.ngAfterContentInit = function () {
        var _this = this;
        // set the tab content's title to match the tab link's title
        this.wizardPageChildren.forEach(function (wizardPage, index) {
            var children = _this.wizardStepChildren.toArray();
            if (children[index] && !wizardPage.hasProjectedTitleContent) {
                wizardPage.title = children[index].title;
            }
        });
        // override superclass' children to setup the proper linked relationship between
        // tabs and contents
        _super.prototype.overrideTabLinkChildren.call(this, this.wizardStepChildren);
        _super.prototype.overrideTabContentChildren.call(this, this.wizardPageChildren);
        // set first step of the wizard as active/current one
        if (this.tabLinks.length > 0) {
            this.selectTab(this.tabLinks[0]);
        }
    };
    Object.defineProperty(Wizard.prototype, "tabLinks", {
        // returns only tabLinks that are not skipped
        get: function () {
            return this.wizardStepChildren.filter(function (wizardStep) {
                return !wizardStep.isSkipped;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wizard.prototype, "tabContents", {
        // returns only tabContents that are not skipped
        get: function () {
            return this.wizardPageChildren.filter(function (wizardPage) {
                return !wizardPage.isSkipped;
            });
        },
        enumerable: true,
        configurable: true
    });
    // open --
    //
    // This is a public function that can be used to programmatically open the
    // wizard.
    Wizard.prototype.open = function () {
        this._open = true;
        this._openChanged.emit(true);
    };
    // close --
    //
    // This is a public function that can be used to programmatically close the
    // wizard.
    Wizard.prototype.close = function () {
        this._open = false;
        this._openChanged.emit(false);
    };
    // _next --
    //
    // This is a private function that is called on the click of the next
    // button and emits the onCommit event of the active tab.
    Wizard.prototype._next = function () {
        var totalSteps = this.tabLinks.length - 1;
        var i = this.currentTabIndex;
        var page = this.tabContents[i];
        if (!page.nextDisabled) {
            page.onCommit.emit(null);
            if (!page.preventDefault) {
                // If no handler for finish button, then close wizard on click
                // of finish by default
                if (totalSteps === i) {
                    this.close();
                }
                else {
                    this.next();
                }
            }
        }
    };
    // next --
    //
    // When called, after successful validation, the wizard will move to the
    // next page.
    // This is a public function that can be used to programmatically advance
    // the user to the next page.
    Wizard.prototype.next = function () {
        var i = this.currentTabIndex;
        var totalSteps = this.tabLinks.length - 1;
        var page = this.tabContents[i];
        // Call the onCommit or the Validation function of that step, and if it
        // returns true, continue to the next step.
        if (i < totalSteps && !page.nextDisabled) {
            var wizardStep = this.tabLinks[i];
            var nextStep = this.tabLinks[i + 1];
            wizardStep.isCompleted = true;
            this.selectTab(nextStep);
        }
    };
    // prev --
    //
    // When called, the wizard will move to the prev page.
    // This is a public function that can be used to programmatically go back
    // to the previous step.
    Wizard.prototype.prev = function () {
        var i = this.currentTabIndex;
        if (i > 0) {
            var wizardStep = this.tabLinks[i];
            var prevStep = this.tabLinks[i - 1];
            wizardStep.isCompleted = false;
            prevStep.isCompleted = false;
            this.selectTab(prevStep);
        }
    };
    // selectTab --
    //
    // Base class function overridden to call the onLoad event emitter
    Wizard.prototype.selectTab = function (wizardNav) {
        _super.prototype.selectTab.call(this, wizardNav);
        var page = this.currentTabContent;
        this.currentPage = page;
        page.onLoad.emit(false);
        // Toggles next and finish button
        var totalSteps = this.tabLinks.length - 1;
        this.isLast = this.currentTabIndex === totalSteps;
        this.isFirst = this.currentTabIndex === 0;
    };
    // skipTab --
    //
    // Public function to skip a Tab given its uniqueId
    Wizard.prototype.skipTab = function (tabId) {
        this._setTabIsSkipped(tabId, true);
    };
    // unSkipTab --
    //
    // Public function to unSkip a tab given its uniqueId
    Wizard.prototype.unSkipTab = function (tabId) {
        this._setTabIsSkipped(tabId, false);
    };
    Wizard.prototype._setTabIsSkipped = function (tabId, isSkipped) {
        var _this = this;
        this.wizardStepChildren.forEach(function (wizardStep, index) {
            if (wizardStep.id === tabId) {
                wizardStep.isSkipped = isSkipped;
                // set the isSkipped property of the matching content if it exists
                if (index < _this.wizardPageChildren.length) {
                    var children = _this.wizardPageChildren.toArray();
                    children[index].isSkipped = isSkipped;
                }
            }
        });
    };
    __decorate([
        core_1.ContentChildren(wizard_step_1.WizardStep), 
        __metadata('design:type', core_1.QueryList)
    ], Wizard.prototype, "wizardStepChildren", void 0);
    __decorate([
        core_1.ContentChildren(wizard_page_1.WizardPage), 
        __metadata('design:type', core_1.QueryList)
    ], Wizard.prototype, "wizardPageChildren", void 0);
    __decorate([
        core_1.Input("clrWizardSize"), 
        __metadata('design:type', String)
    ], Wizard.prototype, "size", void 0);
    __decorate([
        // xl is the default size
        core_1.Input("clrWizardOpen"), 
        __metadata('design:type', Boolean)
    ], Wizard.prototype, "_open", void 0);
    __decorate([
        core_1.Output("clrWizardOpenChanged"), 
        __metadata('design:type', core_1.EventEmitter)
    ], Wizard.prototype, "_openChanged", void 0);
    Wizard = __decorate([
        core_1.Component({
            selector: "clr-wizard",
            viewProviders: [scrolling_service_1.ScrollingService],
            template: "\n      <clr-modal\n            [clrModalOpen]=\"_open\"\n            [clrModalSize]=\"size\"\n            [clrModalClosable]=\"false\"\n            [clrModalStaticBackdrop]=\"true\"\n            (clrModalOpenChange)=\"close()\">\n\n         <div class=\"modal-body\">\n            <div class=\"content-container\">\n               <main class=\"content-area\">\n                  <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"close()\">\n                     <span aria-hidden=\"true\">&times;</span>\n                  </button>\n                  <ng-content></ng-content>\n               </main>\n\n               <nav class=\"nav-panel sidenav\">\n                  <div class=\"text-light\">\n                     <ng-content select=\".wizard-title\"></ng-content>\n                  </div>\n\n                  <ol class=\"nav navList\" role=\"tablist\">\n                     <ng-content select=\"clr-wizard-step\"></ng-content>\n                  </ol>\n               </nav>\n            </div>\n         </div>\n\n         <div class=\"modal-footer\">\n            <button class=\"btn btn-link\" (click)=\"close()\">Cancel</button>\n            <button class=\"btn btn-outline\"\n                  *ngIf=\"!isFirst\" (click)=\"prev($event)\">Back</button>\n            <button class=\"btn btn-primary\"\n                  [class.disabled]=\"currentPage?.nextDisabled\"\n                  (click)=\"_next($event)\">{{isLast? 'Finish' : 'Next'}}</button>\n         </div>\n\n      </clr-modal>\n    ",
            host: {
                "[class.clr-wizard]": "true",
                "[class.main-container]": "true",
                "[class.wizard-md]": "size == 'md'",
                "[class.wizard-lg]": "size == 'lg'",
                "[class.wizard-lx]": "size == 'lx'"
            }
        }), 
        __metadata('design:paramtypes', [scrolling_service_1.ScrollingService])
    ], Wizard);
    return Wizard;
}(tabs_1.Tabs));
exports.Wizard = Wizard;
