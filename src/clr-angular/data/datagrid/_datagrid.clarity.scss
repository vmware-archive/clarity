// Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
// This software is released under MIT license.
// The full license information can be found in LICENSE in the root directory of this project.

@include exports('datagrid.clarity') {
    @include basic-table(".datagrid", ".datagrid-header", ".datagrid-body",
            ".datagrid-row", ".datagrid-column", ".datagrid-cell");

    .datagrid-host {
        display: flex;
        flex-flow: column nowrap;
        height: auto;
        position: relative; // Makes .datagrid-spinner work. TODO: This must be removed from the topic branch b4 merge.
        width: 100%;
    }

    .datagrid {
        display: flex;
        flex-wrap: wrap;
        flex: 1 1 auto;
        width: 100%;
        margin-top: 0.5rem;
        overflow-x: auto; // Enables x scrolling when columns are wider than the datagrid.
        // IE & Firefox needs this
        min-height: 1px;

        // Overrides the table defaults so the new structure has correct corners
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;

        -ms-overflow-style: -ms-autohiding-scrollbar;
    }

    .datagrid-container {
        font-size: $clr-table-fontsize;
        padding: $clr-table-topcellpadding $clr-table-cellpadding $clr-table-bottomcellpadding;
    }

    .datagrid-expandable-caret {
        padding: calc(0.125rem - #{$clr-default-borderwidth}) $horizontalPadding 0.125rem;
        text-align: center;

        .datagrid-expandable-caret-button {
            @include clr-no-styles-button();
            cursor: pointer;
            height: 1.25rem;
            width: 1.25rem;
        }

        .datagrid-expandable-caret-icon {
            color: $gray-dark;
            // nudge down for vertical alignment...
            margin-top: 0.125rem;
            svg {
                transition: transform 0.2s ease-in-out;
            }
        }

        .spinner {
            margin-top: 0.25rem;
        }

        &.datagrid-column {
            padding: $clr-table-topcellpadding $clr-table-cellpadding $clr-table-bottomcellpadding;
        }
    }

    .datagrid-head, .datagrid-body, .datagrid-row, .datagrid-column, .datagrid-cell, .datagrid-fixed-column {
        display: block;
    }

    .datagrid-row {
        display: block;
        border-top: $clr-table-borderwidth solid $clr-table-border-color;

        &:first-child {
            border-top: 0;
        }

        &:hover {
            background-color: $clr-datagrid-row-hover;
        }

        &.datagrid-selected {
            color: $clr-black;
            background-color: $clr-global-selection-color;
        }

        .datagrid-action-overflow {
            position: absolute;
            background: $clr-datagrid-popover-bg-color;
            padding: 0.25rem 0.25rem;
            margin-left: 0.25rem;
            border: $clr-default-borderwidth solid $clr-datagrid-popover-border-color;
            box-shadow: 0 1px 3px rgba($gray-dark, 0.25);
            border-radius: $clr-global-borderradius;
            font-weight: normal;
            z-index: map-get($clr-layers, dropdown-menu);
            white-space: nowrap;

            &::before {
                content: '';
                position: absolute;
                top: 50%;
                right: 100%;
                width: 0;
                height: 0;
                margin-top: -1 * $clr-datagrid-action-arrow-size;
                border-right: $clr-datagrid-action-arrow-size solid $clr-datagrid-popover-border-color;
                border-top: $clr-datagrid-action-arrow-size solid transparent;
                border-bottom: $clr-datagrid-action-arrow-size solid transparent;
            }

            &::after {
                content: '';
                position: absolute;
                top: 50%;
                right: 100%;
                width: 0;
                height: 0;
                // not all browsers support calc() in psuedoelements
                margin-top: -1 * $clr-datagrid-action-arrow-size + $clr-rem-1px;
                border-right: ($clr-datagrid-action-arrow-size - $clr-rem-1px) solid $clr-datagrid-popover-bg-color;
                border-top: ($clr-datagrid-action-arrow-size - $clr-rem-1px) solid transparent;
                border-bottom: ($clr-datagrid-action-arrow-size - $clr-rem-1px) solid transparent;
            }

            .action-item {
                @include clr-getTypePropertiesForDomElement(dropdown_text, (color, font-size, letter-spacing));

                background: transparent;
                border: 0;
                color: $clr-app-font-color-primary;
                cursor: pointer;
                display: block;
                line-height: calc(#{clr-getTypePropertyValueForDomElement(dropdown_text, line-height)} - 1px);
                margin: 0;
                padding: 1px 1rem 0;
                text-align: left;
                width: 100%;

                &:hover,
                &:focus {
                    text-decoration: none;
                    background-color: $clr-datagrid-action-popover-hover-color;
                }

                &.active {
                    background: $clr-datagrid-row-hover;
                    color: $clr-black;
                }

                &:focus {
                    outline: 0;
                }

                &.disabled,
                &:disabled {
                    cursor: not-allowed;
                    opacity: 0.4;
                    user-select: none;

                    &:hover {
                        background: none;
                    }

                    &:active,
                    &:focus {
                        background: none;
                        box-shadow: none;
                    }
                }

                clr-icon {
                    vertical-align: middle;
                    transform: translate3d(0px, -1px, 0);
                }
            }
        }

        .datagrid-row-detail-wrapper {
            flex-basis: 100%;
        }

        .datagrid-row-detail {
            &.datagrid-container {
                padding-top: 0;
            }

            .datagrid-cell {
                padding-top: 0;
            }
        }

        .datagrid-select {
            min-width: calc(0.375rem - #{$clr-table-borderwidth}); // This fixed an issue that made the cell to wide.
            .radio label,
            .checkbox label {
                display: block;
                // Override default checkbox styles for width/height
                min-height: $clr-table-lineheight - $clr-rem-1px;
                padding-left: $clr-table-lineheight;

                &::before, &::after {
                    top: 0;
                }
            }
        }

        .datagrid-signpost-trigger .signpost {
            margin: -0.3rem 0;
            height: 1.03rem;
            .signpost-trigger {
                height: inherit;
                line-height: 1rem;
            }
        }
    }

    .datagrid-row-flex {
        flex: 1 1 auto;
        display: flex;
        flex-flow: row nowrap;

        .datagrid-row-detail {
            &.datagrid-container {
                padding-top: 0;
            }

            .datagrid-cell {
                padding-top: 0;
            }
        }
    }

    .datagrid-action-bar {
        margin-top: 1rem;

        // This changes the height and position of the datagrid-spinner when there is an action-bar
        // Allows us to cover the action-bar with the spinner backgdrop and prevent user interactions.
        & ~ .datagrid-spinner {
            height: calc(100% - 1rem);
            top: 1rem; // Account for the margin above the datagrid-action-bar
        }
    }

    .datagrid-header {
        background-color: $clr-thead-bgcolor;
        position: sticky;
        top: 0;
        display: flex;
        flex: 0 0 auto;
        border-bottom: $clr-table-borderstyle;
        border-bottom-width: 2px;
        z-index: map-get($clr-layers, datagrid-header);

        .datagrid-row {
            &:hover {
                background-color: $clr-thead-bgcolor;
            }
        }
    }

    .datagrid-table {
        display: flex;
        flex-basis: 100%;
        flex-flow: column nowrap;
        /**
            Important - the flex setting here allows headers/body rows to expand to full width of their container
            Its needed to enable both full row hover and the details content when expand id declared.
         */
        flex: 1 1 auto;

        .datagrid-body {
            display: flex;
            flex-flow: column nowrap;
            flex: 1 1 auto;
            min-height: 3rem;
            height: 100%;
            overflow-y: auto;
            -ms-overflow-style: -ms-autohiding-scrollbar;

        }

        .datagrid-column {
            text-align: left;
            min-width: 4rem;
            display: flex;
            flex: 1 1 auto;
            vertical-align: top;
            background: none;
            border: 0;

            &:last-child {
                .datagrid-column-separator {
                    display: none;
                }
            }

            clr-dg-filter,
            clr-dg-string-filter {
                display: flex;
                order: 99;
                margin-left: auto;
            }

            &.asc, &.desc {
                font-weight: 600;

                .datagrid-column-flex::after {
                    content: "";
                    display: flex;
                    flex: 0 0 auto;
                    vertical-align: middle;
                    width: $clr-datagrid-icon-size;
                    height: $clr-datagrid-icon-size;
                    margin-left: 0.25rem;
                    background-repeat: no-repeat;
                    background-size: contain;
                }
            }

            &.asc {
                .datagrid-column-flex::after {
                    background-image: generateUpArrowIcon($action-blues-dark-midtone);
                }
            }
            &.desc {
                .datagrid-column-flex::after {
                    background-image: generateDownArrowIcon($action-blues-dark-midtone);
                }
            }

            .datagrid-filter-toggle {
                @include clr-no-styles-button();
                cursor: pointer;
                float: right;
                vertical-align: middle;
                width: $clr-datagrid-icon-size;
                height: $clr-datagrid-icon-size;
                margin: 0 0.25rem;
                background-repeat: no-repeat;
                background-size: contain;
                background-image: generateFilterIcon($gray-dark-midtone);

                &:hover {
                    background-image: generateFilterIcon($action-blues-dark-midtone);
                }

                &.datagrid-filter-open {
                    background-image: generateFilterIcon($action-blues-dark-midtone);
                }

                &.datagrid-filtered {
                    background-image: generateFilterIcon($action-blues-dark-midtone),
                    generateCircleIcon($action-blues-dark-midtone);
                }

            }

            .datagrid-filter {
                position: absolute;
                top: 100%;
                right: 0;
                margin-top: 0.2rem;
                background: $clr-datagrid-popover-bg-color;
                padding: 0.75rem;
                border: $clr-default-borderwidth solid $clr-datagrid-popover-border-color;
                box-shadow: 0 1px 3px rgba($gray-dark, 0.25);
                border-radius: $clr-global-borderradius;
                font-weight: normal;
                z-index: map-get($clr-layers, dropdown-menu);

                .datagrid-filter-close-wrapper {
                    text-align: right;

                    .close {
                        float: none;
                    }
                }

                // FIXME: remove
                .datagrid-filter-apply {
                    margin-bottom: 0;
                }
            }

            &.datagrid-fixed-width {
                flex: 0 0 auto;
            }

            &--hidden {
                display: none;
            }

            &.datagrid-fixed-column {
                flex: 0 0 $clr-datagrid-fixed-column-size;
                max-width: $clr-datagrid-fixed-column-size;
                min-width: $clr-datagrid-fixed-column-size;
            }

            .datagrid-column-flex {
                display: flex;
                flex: 1 1 auto;
            }

            .datagrid-column-title {
                @include clr-no-styles-button();
                color: $clr-table-font-color;
                text-align: left;
                flex: 1 1 auto;
                align-self: flex-start;
            }

            button.datagrid-column-title:hover {
                text-decoration: underline;
                cursor: pointer;
            }

            .datagrid-column-separator {
                $dg-padding-less-border: 0.5rem - $clr-rem-1px;
                position: relative;
                left: 0.5rem;
                flex: 0 0 auto;
                width: $clr-default-borderwidth;
                order: 100;
                margin-left: auto;
                height: 100%;

                &::after {
                    content: "";
                    position: absolute;
                    height: calc(100% + #{$clr-datagrid-column-separator-expandby} - #{$clr-default-borderwidth});
                    width: $clr-rem-1px;
                    top: calc(-0.5 * #{$clr-datagrid-column-separator-expandby} + 1px);
                    left: 0;
                    background-color: $clr-table-border-color;
                }

                .datagrid-column-handle {
                    @include clr-no-styles-button();
                    display: block;
                    position: absolute;
                    width: calc(0.5rem + 1px);
                    right: -0.5rem;
                    top: -0.25rem;
                    cursor: col-resize;
                    height: calc(100% + 0.5rem - #{$clr-default-borderwidth});
                    z-index: map-get($clr-layers, dropdown-menu);
                }
                .datagrid-column-handle-tracker {
                    position: absolute;
                    right: 0;
                    top: $clr-datagrid-column-handle-tracker-top;
                    display: none;
                    width: 0;
                    //height: 100vh;
                    border-right: $clr-default-borderwidth dotted $clr-action-blue-lighter;
                }
                .exceeded-max {
                    border-right: $clr-default-borderwidth dotted rgba($clr-red-light-midtone, 0.3);
                }
            }

            .datagrid-signpost-trigger .signpost {
                margin: -0.3rem 0;
                height: 1.03rem;
                .signpost-trigger {
                    height: inherit;
                    line-height: 1rem;
                }
            }
        }

        .datagrid-cell {
            flex: 1 1 auto;
            text-align: left;
            min-width: 4rem;
            border-top: 0;

            &.datagrid-fixed-column {
                flex: 0 0 $clr-datagrid-fixed-column-size;
            }

            &.datagrid-fixed-width {
                flex: 0 0 auto;
            }

            &--hidden {
                display: none;
            }

            &.datagrid-fixed-column {
                flex: 0 0 $clr-datagrid-fixed-column-size;
                max-width: $clr-datagrid-fixed-column-size;
                min-width: $clr-datagrid-fixed-column-size;
            }

            &.datagrid-row-actions {
                background: none;
            }

            &.datagrid-expandable-caret {
                padding: calc(0.125rem - #{$clr-default-borderwidth}) $horizontalPadding 0.125rem;
                text-align: center;
            }

            .datagrid-action-toggle {
                @include clr-no-styles-button();
                &:active {
                    color: $clr-datagrid-action-toggle; // Fixed active state on this button for Safari.
                }
            }
        }

        .datagrid-placeholder-container {
            flex: 1 1 auto;
            display: flex;
            justify-content: center;
            border-top: $clr-default-borderwidth solid $clr-table-border-color;
        }

        .datagrid-placeholder {
            background: $clr-table-bgcolor;
            border-top: $clr-default-borderwidth solid $clr-table-border-color;
            width: 100%;

            &.datagrid-empty {
                border-top: 0;
                padding: 0.5rem;
                display: flex;
                flex-flow: column nowrap;
                align-items: center;
                justify-content: center;
                font-size: clr-getTypePropertyValueForDomElement(datagrid_placeholder, font-size);
                color: $clr-dark-midtone-gray;

                .datagrid-placeholder-image {
                    width: 2.5rem;
                    height: 2.5rem;
                    margin-bottom: 0.5rem;
                    background-repeat: no-repeat;
                    background-size: contain;
                    background-position: center;
                    background-image: generateEmptyDatagridPlaceholder();
                }
            }
        }
    }

    .datagrid-footer {
        flex: 0 0 auto;
        display: flex;
        flex-flow: row nowrap;
        justify-content: flex-end;
        align-items: stretch;
        height: 1.5rem;
        padding: 0 $clr-table-cellpadding;
        // Account for borders
        line-height: calc(1.5rem - #{3 * $clr-default-borderwidth});
        font-size: clr-getTypePropertyValueForDomElement(table_header, font-size);
        background-color: $clr-thead-bgcolor;
        border: $clr-default-borderwidth solid $clr-table-footer-border-top-color;
        border-radius: 0 0 $clr-global-borderradius $clr-global-borderradius;

        .pagination {
            display: flex;
            align-items: center;

            &-description {
                white-space: nowrap;
            }

            &-list {
                margin-left: 1.5rem;
                height: calc(1.5rem - #{2 * $clr-default-borderwidth});
            }
        }

        .column-switch-wrapper {
            flex: 0 0 auto;

            &.active {
                .column-toggle--action {
                    color: $clr-action-blue;
                }
            }
            .column-toggle--action {
                // I'm overriding .btn/.btn-link here but am not confident this is the correct way to do it.
                min-width: 0.75rem;
                padding-left: 0;
                padding-right: 0;

                color: $clr-dark-midtone-gray;
                &:hover {
                    color: $clr-action-blue;
                }
            }

            .column-switch {
                border-radius: $clr-global-borderradius;
                padding: 0.75rem;
                background-color: $clr-datagrid-popover-bg-color;
                border: $clr-default-borderwidth solid $clr-datagrid-popover-border-color;
                box-shadow: 0 1px 3px rgba(116, 116, 116, 0.25); // TODO: Add theme-able variable
                width: 10.416667rem;
                display: flex;
                flex-direction: column;

                .switch-header {
                    display: flex;
                    justify-content: space-between;
                    font-weight: clr-getTypePropertyValueForDomElement(datagrid_column_toggle_title, font-weight);
                    font-size: clr-getTypePropertyValueForDomElement(datagrid_column_toggle_title, font-size);
                    padding-bottom: 0.5rem;
                    line-height: 1rem;

                    button {
                        min-width: 0.75rem;
                        margin: 0;
                        padding: 0;
                        color: $clr-dark-midtone-gray;

                        &:hover {
                            color: $clr-action-blue;
                        }
                    }
                }

                .switch-content {
                    max-height: 12.5rem;
                    overflow-y: auto;
                    min-height: calc(1rem + #{$clr-default-borderwidth}); // prevents scrollbars in IE.

                    li {
                        line-height: 1rem;
                        padding-left: 2 * $clr-rem-1px; // Hack that doesn't fix issue #539. TODO: Fix issue #539.
                    }
                }

                .switch-footer {
                    .btn {
                        margin: 0;
                        padding: 0;
                    }

                    .action-right {
                        display: flex;
                        justify-content: flex-end
                    }
                }
            }
        }
    }
    .datagrid-footer-select.checkbox {
        display: block;
        line-height: inherit;
        flex: 0 0 (1.5rem - (2 * $clr-rem-1px)); // can't use calc() in flex. #thanksIE!
        margin-right: 0.083333rem; // Space for the instance when a hideable column toggle is next to it.
        align-self: flex-start;
        label {
            color: unset;
            cursor: default;
            opacity: 1;
            line-height: inherit;
        }

        input[type="checkbox"] + label {
            &::before, &::after {
                top: 0.333333rem;
            }

            &::after {
                border-left-color: $clr-white;
                border-bottom-color: $clr-white;
            }
        }
    }

    .datagrid-spinner {
        position: absolute;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        top: 0.5rem;
        height: calc(100% - 0.5rem); // Account for the margin above the datagrid-action-bar
        background-color: $clr-datagrid-loading-background;
        z-index: map-get($clr-layers, modal-bg); // Keeps the spinner above the datagrid header.
    }

    .datagrid-select {
        .radio, .checkbox {
            margin-top: -1 * $clr-rem-1px;
        }
    }

    .datagrid-compact {
        .datagrid-column .datagrid-column-separator {
            &::after {
                height: calc(100% + 0.5 * #{$clr-datagrid-column-separator-expandby} - #{$clr-default-borderwidth});
                top: calc(-0.25 * #{$clr-datagrid-column-separator-expandby} + 1px);
            }
            .datagrid-column-handle-tracker {
                top: 0.5*$clr-datagrid-column-handle-tracker-top;
            }
        }
        .datagrid-cell {
            clr-icon {
                margin-top: calc(-.125rem - 1px);
                margin-bottom: -0.125rem;
            }
            .badge {
                margin-top: -0.125rem;
                margin-bottom: -1px;
            }
        }
        .datagrid-expandable-caret {
            text-align: center;
            .spinner {
                margin-top: 0.125rem;
            }
            .datagrid-expandable-caret-button {
                @include clr-no-styles-button();
                height: 1rem;
                width: 1rem;
                outline-offset: $clr-datagrid-compact-outline-offset;
            }
            .datagrid-expandable-caret-icon {
                margin: 0;
            }
            &.datagrid-cell {
                padding: 0;
            }
            &.datagrid-column {
                padding-top: calc(#{$clr-table--compact-verticalPadding} + 1px);
                padding-bottom: calc(#{$clr-table--compact-verticalPadding});
            }
        }
        .datagrid-signpost-trigger .signpost .signpost-trigger {
            clr-icon:not(
            [shape="info-circle"],
            [shape="exclamation-triangle"],
            [shape="exclamation-circle"],
            [shape="check-circle"],
            [shape="info"],
            [shape="error"]) {
                width: 0.875rem; //21px
                height: 0.875rem; //21px
            }
        }

        .datagrid-footer-select.checkbox {
            input[type="checkbox"] + label {
                &::before, &::after {
                    top: 0.11111rem;
                }

                // Need a better way to prevent the border-color from getting clobbered.
                &::after {
                    border-left-color: $clr-white;
                    border-bottom-color: $clr-white;
                }
            }
        }

        .datagrid-footer {
            height: 1rem;
            padding: 0 $clr-table-cellpadding;
            line-height: calc(1rem - 1px);
            .pagination-list {
                height: calc(1rem - #{2 * $clr-default-borderwidth});
            }
            .column-switch-wrapper .column-toggle--action {
                margin: 0;
                outline-offset: $clr-datagrid-compact-outline-offset;
            }
        }
    }

    .datagrid-footer-description {
        flex: 1 1 auto;
        flex-wrap: nowrap;
        white-space: nowrap;
        display: flex;
        justify-content: flex-end;
    }

    // Yes, this is not .datagrid-pagination on purpose.
    // I've been told to consider a potential separate pagination component.
    .pagination-list {
        list-style: none;
        display: flex;
        flex-flow: row nowrap;
        justify-content: center;
        align-items: stretch;

        > * {
            padding: 0 0.1rem;
            margin-left: 0.3rem;

            &:first-child {
                margin-left: 0;
            }
        }

        .pagination-current {
            font-weight: 600;
            border-bottom: (2 * $clr-default-borderwidth) solid $action-blues-dark-midtone;
        }

        $clr-pagination-extra-margin: 0.25rem;
        .pagination-previous, .pagination-next {
            display: inline-block;
            vertical-align: middle;
            width: $clr-datagrid-icon-size;
            height: $clr-datagrid-icon-size;
            background-repeat: no-repeat;
            background-size: contain;
        }

        .pagination-previous {
            margin-right: $clr-pagination-extra-margin;
            background-image: generateLeftCaretIcon($gray-dark);
        }
        .pagination-next {
            margin-left: $clr-pagination-extra-margin;
            background-image: generateRightCaretIcon($gray-dark);
        }

        button {
            @include clr-no-styles-button();
            color: $gray-dark;
            // FIXME: this should be in the general reboot
            cursor: pointer;
        }
    }

    /*
        The following classes are used by the renderer when performing internal operations.
        Using the browser calculations improves rendering performance.
    */
    // A class used by the dom-renderer.ts when testing cell for a user defined width.
    .datagrid-cell-width-zero {
        // Much zero. Such !important. Wow.
        border: 0 !important;
        padding: 0 !important;
        width: 0;
        flex: 0 0 auto !important;
        min-width: 0 !important;
    }

    // This class is only applied temporarily, to improve rendering performance, while performing internal operations.
    // Used in table-renderer.ts in noLayout with NO_LAYOUT_CLASS.
    .datagrid-no-layout {
        display: block;

        .datagrid-body, .datagrid-row, .datagrid-cell {
            display: none;
        }

        .datagrid-table, .datagrid-header, .datagrid-header .datagrid-row, .datagrid-column {
            display: block;
            flex: 1;
        }
    }

    /**
        These classes are used in table-renderer.ts when it puts the datagrid into in tableMode and computes column
        widths. NOTE: they are only applied during calculation and then removed.
     */
    .datagrid-computing-columns-width {
        display: block;

        .datagrid-body {
            display: table;
            table-layout: auto;
        }
        .datagrid-header {
            display: table-header-group;
        }
        .datagrid-row {
            display: table-row-group;
        }
        .datagrid-header .datagrid-row {
            display: table-row;
        }
        .datagrid-row-master {
            display: table-row;
        }
        .datagrid-row-detail {
            display: none;
        }
        .datagrid-column, .datagrid-cell {
            display: table-cell;
        }
        .datagrid-column-separator {
            display: none;
        }
        .datagrid-placeholder-container {
            display: none;
        }
        .datagrid-fixed-column {
            display: none;
        }
    }

    .datagrid-computing-row-height {
        overflow-y: hidden;
    }
    // END Calculation classes.
}

