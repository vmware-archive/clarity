@import './../styles/core-component';
@import './../../clr-angular/utils/mixins.clarity';
@import './../../clr-angular/button/variables.button';
@import './../../clr-angular/button/properties.button';

@import './../../clr-angular/progress/spinner/variables.spinner';
@import './../../clr-angular/image/icons.clarity';
@import './../../clr-angular/progress/spinner/spinner.clarity';

@function getActiveWidthBoxShadowTop($type: default) {
  @if type == primary {
    @return $clr_baselineRem_1px;
  }

  @if type == outline-success {
    @return $clr_baselineRem_1px;
  }

  @if type == outline-danger {
    @return $clr_baselineRem_1px;
  }

  @if type == link {
    @return 0;
  }

  @if type == inverse {
    @return $clr_baselineRem_1px;
  }

  @return $clr_baselineRem_2px;
}

@function getSassButtonColor($type: default, $property: null) {
  @if $property == null {
    @return null;
  }

  @if $type == default {
    @return lookupFromDefaultButtonColors($property);
  }

  @if $type == default-outline {
    @return lookupFromDefaultOutlineButtonColors($property);
  }

  @if $type == primary {
    @return lookupFromPrimaryButtonColors($property);
  }

  @if $type == success {
    @return lookupFromSuccessButtonColors($property);
  }

  @if $type == success-outline {
    @return lookupFromSuccessOutlineButtonColors($property);
  }

  @if $type == danger {
    @return lookupFromDangerButtonColors($property);
  }

  @if $type == danger-outline {
    @return lookupFromDangerOutlineButtonColors($property);
  }

  @if $type == link {
    @return lookupFromLinkButtonColors($property);
  }

  @if $type == inverse {
    @return lookupFromInverseButtonColors($property);
  }

  @if $type == icon {
    @return lookupFromIconButtonColors($property);
  }

  @return null;
}

@mixin button-css-var($button-type: default, $style: null, $styleNickname: null) {
  @if $style != null and $styleNickname != null {
    $cssVarName: #{'clr-btn-' + $button-type + '-' + $styleNickname};
    $fallbackStyle: getSassButtonColor($button-type, $styleNickname);
    @include css-var($style, $cssVarName, $fallbackStyle);
  }
}

@mixin populateButtonProperties($button-type: default) {
  @include button-css-var($button-type, border-color, border-color);
  @include button-css-var($button-type, background-color, bg-color);
  @include button-css-var($button-type, color, color);

  //To override the visited state of anchor links styled as buttons
  &:host(:visited) {
    @include button-css-var($button-type, color, color);
  }

  &:host(:hover) {
    @include button-css-var($button-type, background-color, hover-bg-color);
    @include button-css-var($button-type, color, hover-color);
  }

  &:host(:active) {
    @if $button-type == link {
      box-shadow: none;
    } @else {
      $fallbackColor: getSassButtonColor($button-type, box-shadow-color);

      // IE/OldEdge
      box-shadow: 0 getActiveWidthBoxShadowTop($button-type) 0 0 $fallbackColor inset;

      box-shadow: 0
        getActiveWidthBoxShadowTop($button-type)
        0
        0
        var(#{'--clr-btn-' + $button-type + '-' + 'box-shadow-color'}, $fallbackColor)
        inset;
    }
  }

  &:host([disabled]) {
    @include button-css-var($button-type, color, disabled-color);
    cursor: not-allowed;
    opacity: 0.4;
    @include button-css-var($button-type, background-color, disabled-bg-color);
    @include button-css-var($button-type, border-color, disabled-border-color);
    box-shadow: none;
  }
}

@mixin btn-checked-styles($button-type: default, $type: checkbox) {
  // add semantic prop: group-checked-font-color
  input[type='#{$type}']:checked + label {
    background-color: getSassButtonColor($button-type, checked-bg-color);
    color: getSassButtonColor($button-type, checked-color);
  }
}

@mixin btn-nowrap() {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

@mixin btn-min-max-widths() {
  min-width: $clr_baselineRem_3;
  max-width: $clr_baselineRem_15;
}

@mixin btn-text-properties() {
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  vertical-align: middle;

  &:host(:hover) {
    text-decoration: none;
  }
}

@mixin btn-default-border-styles() {
  @include css-var(border-radius, clr-btn-border-radius, $clr-btn-border-radius);
  @include css-var(border-width, clr-btn-border-width, $clr-btn-border-width);
  border-style: solid;
}

@mixin btn-appearance() {
  cursor: pointer;
  display: inline-block;

  // Overrides a Fix for IOS in BS4 _normalize.scss (~ln 330)
  // `!important` is to override specificity in this instance
  // But we wanted to preserve the normalize fix in non-Clarity buttons for iOS
  -webkit-appearance: none !important;
}

@mixin btn-sm-appearance() {
  @include css-var(line-height, clr-btn-appearance-standard-line-height, $clr-btn-appearance-standard-line-height);
  letter-spacing: $clr-btn-appearance-standard-letter-spacing;
  @include css-var(font-size, clr-btn-appearance-standard-font-size, $clr-btn-appearance-standard-font-size);
  @include css-var(font-weight, clr-btn-appearance-standard-font-weight, $clr-btn-appearance-standard-font-weight);
  @include css-var(height, clr-btn-appearance-standard-height, $clr-btn-appearance-standard-height);
  @include css-var(padding, clr-btn-appearance-standard-padding, $clr-btn-appearance-standard-padding);
}

@mixin generateButton() {
  @include btn-appearance();
  @include btn-default-border-styles();
  @include btn-min-max-widths();
  @include btn-nowrap();
  @include btn-text-properties();
}

@import '../../clr-angular/button/properties.button';

:host {
  box-sizing: border-box;

  @include generateButton();
  @include populateButtonProperties(default);

  @include css-var(line-height, clr-btn-appearance-form-line-height, $clr-btn-appearance-form-line-height);
  letter-spacing: $clr-btn-appearance-form-letter-spacing;
  @include css-var(font-size, clr-btn-appearance-form-font-size, $clr-btn-appearance-form-font-size);
  @include css-var(font-weight, clr-btn-appearance-form-font-weight, $clr-btn-appearance-form-font-weight);
  @include css-var(height, clr-btn-appearance-form-height, $clr-btn-appearance-form-height);
  @include css-var(padding, clr-btn-appearance-form-padding, $clr-btn-appearance-form-padding);

  @include css-var(margin-top, clr-btn-vertical-margin, $clr-btn-vertical-margin);
  @include css-var(margin-bottom, clr-btn-vertical-margin, $clr-btn-vertical-margin);
  @include css-var(margin-right, clr-btn-horizontal-margin, $clr-btn-horizontal-margin);
  margin-left: 0;

  user-select: none;
}

:host([icon]) {
  min-width: 0;

  &:host([disabled]) {
    @include button-css-var(icon, color, disabled-color);
  }
}

:host([block]) {
  display: block;
  width: 100%;
  max-width: 100%;
}

:host([status='primary']) {
  @include populateButtonProperties(primary);
  @include btn-checked-styles(primary);
}

:host([status='success']) {
  @include populateButtonProperties(success);
  @include btn-checked-styles(success);

  &:host([action='outline']) {
    @include populateButtonProperties(success-outline);
    @include btn-checked-styles(outline-success);
  }
}

:host([status='danger']),
:host([status='warning']) {
  @include populateButtonProperties(danger);
  @include btn-checked-styles(danger);

  &:host([action='outline']) {
    @include populateButtonProperties(danger-outline);
    @include btn-checked-styles(outline-danger);
  }
}

:host([action='outline']) {
  @include populateButtonProperties(default-outline);
}

:host([status='inverse']) {
  @include populateButtonProperties(inverse);
}

:host([action='link']) {
  @include populateButtonProperties(link);
  @include btn-checked-styles(link);
  margin-right: 0;
}

:host([size='sm']) {
  @include btn-sm-appearance();

  .spinner {
    @include min-equilateral($clr_baselineRem_0_5416);
  }
}
