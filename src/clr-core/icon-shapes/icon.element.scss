@import './../styles/mixins/mixins';

@mixin setIconColor($clr-icon-color-var) {
  fill: unquote($clr-icon-color-var);

  .transparent-fill-stroke {
    stroke: unquote($clr-icon-color-var);
  }
}

@mixin rotateSVGIcon($deg) {
  svg {
    transform: rotate($deg);
  }
}

@mixin flipSVGIcon($direction) {
  @if $direction == 'horizontal' {
    svg {
      transform: scale(-1) rotateX(180deg);
    }
    /* stylelint-disable */
  } @else if $direction == 'vertical' {
    /* stylelint-enable */
    svg {
      transform: scale(-1) rotateY(180deg);
    }
  }
}

:host {
  display: inline-block;
  @include equilateral($clr_baselineRem_0_667);
  margin: 0;
  vertical-align: middle;
  @include setIconColor(#{'var(--clr-icon-color-default, currentColor)'});

  & > div {
    & > * {
      height: 100%;
      width: 100%;
      display: block;
      pointer-events: none;
    }

    & > svg {
      transition: inherit;

      title {
        display: none;
      }
    }
  }
}

div {
  @include equilateral(100%);
  overflow: hidden;
}

svg {
  display: block;
}

// sizing
:host(.clr-i-size-sm) {
  // weirdly, the default... 16px
  @include equilateral($clr_baselineRem_0_667);
}

:host(.clr-i-size-md) {
  // 24px
  @include equilateral($clr_baselineRem_1);
}

:host(.clr-i-size-lg) {
  // 36px
  @include equilateral($clr_baselineRem_1_5);
}

:host(.clr-i-size-xl) {
  // 48px
  @include equilateral($clr_baselineRem_2);
}

:host(.clr-i-size-xxl) {
  // 64px
  @include equilateral($clr_baselineRem_2_66);
}

// colors
// DEPRECATED IN 3.0: is-green, .is-success
:host(.is-green),
:host(.is-success),
:host([status='success']) {
  @include setIconColor(
    #{'var(--clr-icon-color-success, var(--clr-color-success-700,' + $clr-color-success-700 + '))'}
  );
}

// DEPRECATED IN 3.0: is-red, is-error, is-danger
:host(.is-red),
:host(.is-danger),
:host(.is-error),
:host([status='danger']) {
  @include setIconColor(#{'var(--clr-icon-color-danger, var(--clr-color-danger-700,' + $clr-color-danger-700 + '))'});
}

// DEPRECATED IN 3.0: is-warning
:host(.is-warning),
:host([status='warning']) {
  @include setIconColor(
    #{'var(--clr-icon-color-warning, var(--clr-color-warning-900,' + $clr-color-warning-900 + '))'}
  );
}

// DEPRECATED IN 3.0: is-blue, is-info
:host(.is-blue),
:host(.is-info),
:host([status='info']) {
  @include setIconColor(#{'var(--clr-icon-color-info, var(--clr-color-action-600,' + $clr-color-action-600 + '))'});
}

// DEPRECATED IN 3.0: is-highlight
:host(.is-highlight),
:host([status='highlight']) {
  @include setIconColor(
    #{'var(--clr-icon-color-highlight, var(--clr-color-action-600,' + $clr-color-action-600 + '))'}
  );
}

// INVERSE COLORS

// DEPRECATED IN 3.0: is-white, is-inverse
:host(.is-white),
:host(.is-inverse),
:host([inverse]) {
  @include setIconColor(#{'var(--clr-icon-color-inverse, var(--clr-color-neutral-0,' + $clr-color-neutral-0 + '))'});
}

// DEPRECATED IN 3.0: is-success, is-inverse
:host([inverse].is-success),
:host([status='success'].is-inverse),
:host([inverse][status='success']) {
  @include setIconColor(
    #{'var(--clr-icon-color-inverse-success, var(--clr-color-success-400,' + $clr-color-success-400 + '))'}
  );
}

// DEPRECATED IN 3.0: is-error, is-danger, is-inverse
:host(.is-inverse.is-error),
:host(.is-inverse.is-danger),
:host([status='danger'].is-inverse),
:host([inverse].is-error),
:host([inverse].is-danger),
:host([inverse][status='danger']) {
  @include setIconColor(
    #{'var(--clr-icon-color-inverse-danger, var(--clr-color-danger-700,' + $clr-color-danger-700 + '))'}
  );
}

// DEPRECATED IN 3.0: is-warning, is-inverse
:host(.is-inverse.is-warning),
:host([status='warning'].is-inverse),
:host([inverse].is-warning),
:host([inverse][status='warning']) {
  @include setIconColor(
    #{'var(--clr-icon-color-inverse-warning, var(--clr-color-warning-500,' + $clr-color-warning-500 + '))'}
  );
}

// directional
:host([dir='up']),
:host([direction='up']) {
  @include rotateSVGIcon(0deg);
}

:host([dir='down']),
:host([direction='down']) {
  @include rotateSVGIcon(180deg);
}

:host([dir='right']),
:host([direction='right']) {
  @include rotateSVGIcon(90deg);
}

:host([dir='left']),
:host([direction='left']) {
  @include rotateSVGIcon(270deg);
}

:host([flip='horizontal']) {
  @include flipSVGIcon('horizontal');
}

:host([flip='vertical']) {
  @include flipSVGIcon('vertical');
}

.clr-i-badge {
  @include setIconColor(#{'var(--clr-icon-color-danger, var(--clr-color-danger-700,' + $clr-color-danger-700 + '))'});
}

// outlined

:host {
  .clr-i-solid,
  .clr-i-solid--badged,
  .clr-i-solid--alerted {
    display: none;
  }

  .clr-i-outline--alerted,
  .clr-i-outline--badged {
    &:not(.clr-i-outline) {
      display: none;
    }
  }
}

// DEPRECATED IN 3.0: has-alert
:host([class*='has-alert']) .can-alert,
:host([alert]) .can-alert {
  .clr-i-outline--alerted {
    display: block;
  }

  .clr-i-outline:not(.clr-i-outline--alerted) {
    display: none;
  }
}

// DEPRECATED IN 3.0: has-badge
:host([class*='has-badge']) .can-badge,
:host([badge]) .can-badge,
:host([badge-type]) .can-badge {
  .clr-i-outline--badged {
    display: block;
  }

  .clr-i-outline:not(.clr-i-outline--badged) {
    display: none;
  }
}

// solid

// DEPRECATED IN 3.0: is-solid
:host(.is-solid) .has-solid,
:host([solid]) .has-solid {
  .clr-i-solid {
    display: block;
  }

  .clr-i-outline,
  .clr-i-outline--badged {
    display: none;
  }

  .clr-i-solid--alerted,
  .clr-i-solid--badged {
    &:not(.clr-i-solid) {
      display: none;
    }
  }
}

// DEPRECATED IN 3.0: is-solid, has-badge
:host(.is-solid[class*='has-badge']) .can-badge.has-solid,
:host([solid].has-badge) .can-badge.has-solid,
:host([badge].is-solid) .can-badge.has-solid,
:host([badge][solid]) .can-badge.has-solid,
:host([badge-type].is-solid) .can-badge.has-solid,
:host([badge-type][solid]) .can-badge.has-solid {
  .clr-i-solid--badged {
    display: block;
  }

  .clr-i-outline,
  .clr-i-outline--badged,
  .clr-i-solid:not(.clr-i-solid--badged) {
    display: none;
  }
}

// DEPRECATED IN 3.0: is-solid, has-alert
:host(.is-solid[class*='has-alert']) .can-alert.has-solid,
:host([solid].has-alert) .can-alert.has-solid,
:host([alert].is-solid) .can-alert.has-solid,
:host([solid][alert]) .can-alert.has-solid {
  .clr-i-solid--alerted {
    display: block;
  }

  .clr-i-outline,
  .clr-i-outline--alerted,
  .clr-i-solid:not(.clr-i-solid--alerted) {
    display: none;
  }
}

// variant badge colors

// DEPRECATED IN 3.0: has-badge--success
:host(.has-badge--success),
:host([badge-type='success']) {
  .clr-i-badge {
    @include setIconColor(
      #{'var(--clr-icon-color-success, var(--clr-color-success-700,' + $clr-color-success-700 + '))'}
    );
  }
}

// DEPRECATED IN 3.0: has-badge--danger, has-badge--error
:host(.has-badge--danger),
:host(.has-badge--error),
:host([badge-type='danger']) {
  .clr-i-badge {
    @include setIconColor(#{'var(--clr-icon-color-danger, var(--clr-color-danger-700,' + $clr-color-danger-700 + '))'});
  }
}

// there is no .has-badge--warning classname
:host([badge-type='warning']) {
  .clr-i-badge {
    @include setIconColor(
      #{'var(--clr-icon-color-warning, var(--clr-color-warning-900,' + $clr-color-warning-900 + '))'}
    );
  }
}

// DEPRECATED IN 3.0: has-badge--info
:host(.has-badge--info),
:host([badge-type='info']) {
  .clr-i-badge {
    @include setIconColor(#{'var(--clr-icon-color-info, var(--clr-color-action-600,' + $clr-color-action-600 + '))'});
  }
}

// alert colors
// DEPRECATED IN 3.0: has-alert
:host(.has-alert),
:host([alert]) {
  .clr-i-alert {
    @include setIconColor(
      #{'var(--clr-icon-color-warning, var(--clr-color-warning-800,' + $clr-color-warning-800 + '))'}
    );
  }
}

// inverse + variants

// DEPRECATED IN 3.0: is-highlight, is-inverse
:host([status='highlight'][inverse]),
:host([status='highlight'].is-inverse),
:host([inverse].is-highlight),
:host(.is-highlight.is-inverse) {
  @include setIconColor(
    #{'var(--clr-icon-color-inverse-highlight, var(--clr-color-action-400,' + $clr-color-action-400 + '))'}
  );
}

// variant badge colors
// DEPRECATED IN 3.0: has-badge--success, is-inverse
:host([badge-type='success'][inverse]),
:host([inverse].has-badge--success),
:host([badge-type='success'].is-inverse),
:host(.has-badge--success.is-inverse) {
  .clr-i-badge {
    @include setIconColor(
      #{'var(--clr-icon-color-inverse-success, var(--clr-color-success-400,' + $clr-color-success-400 + '))'}
    );
  }
}

// LEFTOFF: UPDATE ICON-SETS DEMO TO USE NEW CODE; ALSO TEST FOR AND FIX NULL/UNDEFINED IN SIZE/SHAPE SETTERS

// DEPRECATED IN 3.0: has-badge--error, has-badge--danger, is-inverse
:host([badge][inverse]),
:host([badge].is-inverse),
:host([badge-type='danger'][inverse]),
:host([badge-type='danger'].is-inverse),
:host(.has-badge--danger[inverse]),
:host(.has-badge--error[inverse]),
:host(.has-badge--danger.is-inverse),
:host(.has-badge--error.is-inverse) {
  .clr-i-badge {
    @include setIconColor(
      #{'var(--clr-icon-color-inverse-danger, var(--clr-color-danger-500,' + $clr-color-danger-500 + '))'}
    );
  }
}

// there is no has-badge--warning classname
:host([badge-type='warning'][inverse]) {
  .clr-i-badge {
    @include setIconColor(
      #{'var(--clr-icon-color-inverse-warning, var(--clr-color-warning-500,' + $clr-color-warning-500 + '))'}
    );
  }
}

// DEPRECATED IN 3.0: has-badge--info, is-inverse
:host([badge-type='info'][inverse]),
:host(.has-badge--info[inverse]),
:host([badge-type='info'].is-inverse),
:host(.has-badge--info.is-inverse) {
  .clr-i-badge {
    @include setIconColor(
      #{'var(--clr-icon-color-inverse-info, var(--clr-color-action-400,' + $clr-color-action-400 + '))'}
    );
  }
}

// alert colors
// DEPRECATED IN 3.0: has-alert, is-inverse
:host([alert][inverse]),
:host(.has-alert[inverse]),
:host(.is-inverse[alert]),
:host(.has-alert.is-inverse) {
  .clr-i-alert {
    @include setIconColor(
      #{'var(--clr-icon-color-inverse-warning, var(--clr-color-warning-500,' + $clr-color-warning-500 + '))'}
    );
  }
}
